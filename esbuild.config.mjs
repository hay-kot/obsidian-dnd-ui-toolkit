import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Create a separate CSS build context
const buildCSS = async () => {
	// Create styles directory if it doesn't exist
	const stylesDir = "lib/styles";
	if (!fs.existsSync(stylesDir)) {
		fs.mkdirSync(stylesDir, { recursive: true });
	}

	// Build CSS separately
	await esbuild.build({
		entryPoints: ["lib/styles/index.css"],
		bundle: true,
		outfile: "styles.css",
		minify: false,
		logLevel: "info",
	});
};

// Main JS build context
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	// Build CSS first
	await buildCSS();
	// Then build JS
	await context.rebuild();
	process.exit(0);
} else {
	// Initial CSS build
	await buildCSS();

	// Watch for CSS changes
	const cssWatcher = fs.watch("lib/styles", { recursive: true }, async (eventType, filename) => {
		if (filename && filename.endsWith(".css")) {
			console.log(`CSS file changed: ${filename}, rebuilding styles.css...`);
			await buildCSS();
		}
	});

	// Watch for JS changes
	await context.watch();

	// Handle process termination
	process.on("SIGINT", () => {
		cssWatcher.close();
		context.dispose();
		process.exit(0);
	});
}
